import os
import logging
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage 
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto, BufferedInputFile
from aiogram.filters import Command
from aiogram import F
from PIL import Image
import io
import asyncio

# –î–ª—è Aiohttp Webhook
from aiohttp import web
from aiogram.webhook.aiohttp_server import SimpleRequestHandler

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è –∑ —Ñ–∞–π–ª—É .env
load_dotenv()

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è
BOT_TOKEN = os.getenv("BOT_TOKEN")

CHANNEL_ID_STR = os.getenv("CHANNEL_ID", "0")
CHANNEL_ID = int(CHANNEL_ID_STR) if CHANNEL_ID_STR.strip().lstrip('-').isdigit() else 0

MONOBANK_CARD_NUMBER = os.getenv("MONOBANK_CARD_NUMBER", "")

WEBHOOK_URL = os.getenv("WEBHOOK_URL", "") 

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö
if not BOT_TOKEN:
    logging.error("‚ùå BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! –ë–æ—Ç –Ω–µ –∑–º–æ–∂–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞.")
    exit(1) 
if not CHANNEL_ID:
    logging.warning("‚ö†Ô∏è CHANNEL_ID –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∞–±–æ –Ω–µ —î –¥—ñ–π—Å–Ω–∏–º —á–∏—Å–ª–æ–º. –ü—É–±–ª—ñ–∫–∞—Ü—ñ—è –≤ –∫–∞–Ω–∞–ª –º–æ–∂–µ –±—É—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
if not MONOBANK_CARD_NUMBER:
    logging.warning("‚ö†Ô∏è MONOBANK_CARD_NUMBER –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ–º—ñ—Å—ñ—é –º–æ–∂–µ –±—É—Ç–∏ –Ω–µ–ø–æ–≤–Ω–æ—é.")
if not WEBHOOK_URL:
    logging.warning("‚ö†Ô∏è WEBHOOK_URL –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. Webhook –º–æ–∂–µ –Ω–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –Ω–∞–ª–µ–∂–Ω–∏–º —á–∏–Ω–æ–º.")


# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–∞–Ω—ñ–≤ –¥–ª—è FSM –¥–ª—è —Å–ø—Ä–æ—â–µ–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É
class NewSimpleProduct(StatesGroup):
    name = State()
    price = State()
    photo = State() # –¢—ñ–ª—å–∫–∏ –æ–¥–Ω–µ —Ñ–æ—Ç–æ
    description = State()
    contact = State() # –ù–æ–≤–µ –ø–æ–ª–µ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç—É
    confirm = State()

# --- –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó ---
def get_main_menu_keyboard():
    """–ü–æ–≤–µ—Ä—Ç–∞—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    keyboard_buttons = [
        [types.KeyboardButton(text="üì¶ –î–æ–¥–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è")],
        [types.KeyboardButton(text="üìñ –ü—Ä–∞–≤–∏–ª–∞")]
    ]
    return types.ReplyKeyboardMarkup(keyboard=keyboard_buttons, resize_keyboard=True)

# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ---

@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start."""
    logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É /start –≤—ñ–¥ {message.from_user.id}")
    await state.clear()
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –Ø BigMoneyCreateBot, –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è.", reply_markup=get_main_menu_keyboard())

@dp.message(F.text == "üì¶ –î–æ–¥–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è")
async def add_simple_product_start(message: types.Message, state: FSMContext):
    """–ü–æ—á–∞—Ç–æ–∫ —Å–ø—Ä–æ—â–µ–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è."""
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –ø–æ—á–∞–≤ –¥–æ–¥–∞–≤–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è.")
    await state.set_state(NewSimpleProduct.name)
    await message.answer("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è:")

@dp.message(NewSimpleProduct.name)
async def process_simple_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞–∑–≤–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è."""
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –≤–≤—ñ–≤ –Ω–∞–∑–≤—É: {message.text}")
    await state.update_data(name=message.text)
    await state.set_state(NewSimpleProduct.price)
    await message.answer("üí∞ –í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 500 –≥—Ä–Ω, 20 USD –∞–±–æ –¥–æ–≥–æ–≤—ñ—Ä–Ω–∞):")

@dp.message(NewSimpleProduct.price)
async def process_simple_price(message: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ —Ü—ñ–Ω–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è."""
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –≤–≤—ñ–≤ —Ü—ñ–Ω—É: {message.text}")
    await state.update_data(price=message.text)
    await state.set_state(NewSimpleProduct.photo)
    await message.answer("üì∑ –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –æ–¥–Ω–µ —Ñ–æ—Ç–æ –¥–ª—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è (–∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /skip_photo, —è–∫—â–æ —Ñ–æ—Ç–æ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–µ).")

@dp.message(NewSimpleProduct.photo, F.content_type == types.ContentType.PHOTO)
async def process_simple_photo(message: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ç–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è (–æ–¥–Ω–µ —Ñ–æ—Ç–æ)."""
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –¥–æ–¥–∞–≤ —Ñ–æ—Ç–æ.")
    await state.update_data(photo_file_id=message.photo[-1].file_id)
    await state.set_state(NewSimpleProduct.description)
    await message.answer("üìù –í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è:")

@dp.message(NewSimpleProduct.photo, Command("skip_photo"))
async def skip_simple_photo(message: types.Message, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó."""
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –ø—Ä–æ–ø—É—Å—Ç–∏–≤ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ.")
    await state.update_data(photo_file_id=None)
    await state.set_state(NewSimpleProduct.description)
    await message.answer("üìù –í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è:")

@dp.message(NewSimpleProduct.description)
async def process_simple_description(message: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –æ–ø–∏—Å—É –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è."""
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –≤–≤—ñ–≤ –æ–ø–∏—Å.")
    await state.update_data(description=message.text)
    await state.set_state(NewSimpleProduct.contact)
    await message.answer("üìû –í–∫–∞–∂—ñ—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –∑–≤'—è–∑–∫—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, @–≤–∞—à_–Ω—ñ–∫, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É, –ø–æ—Å–∏–ª–∞–Ω–Ω—è):")

@dp.message(NewSimpleProduct.contact)
async def process_simple_contact(message: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç—É –¥–ª—è –∑–≤'—è–∑–∫—É."""
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –≤–≤—ñ–≤ –∫–æ–Ω—Ç–∞–∫—Ç: {message.text}")
    await state.update_data(contact=message.text)
    user_data = await state.get_data()
    
    confirmation_text = (
        f"–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ:\n\n"
        f"üì¶ –ù–∞–∑–≤–∞: {user_data['name']}\n"
        f"üí∞ –¶—ñ–Ω–∞: {user_data['price']}\n"
        f"üìù –û–ø–∏—Å: {user_data['description']}\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {user_data['contact']}\n"
    )
    
    keyboard_buttons = [
        [types.KeyboardButton(text="‚úÖ –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏")],
        [types.KeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")]
    ]
    
    await state.set_state(NewSimpleProduct.confirm)
    await message.answer(confirmation_text, reply_markup=types.ReplyKeyboardMarkup(keyboard=keyboard_buttons, resize_keyboard=True))

@dp.message(NewSimpleProduct.confirm)
async def process_simple_confirm(message: types.Message, state: FSMContext):
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–±–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è."""
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î/—Å–∫–∞—Å–æ–≤—É—î –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è: {message.text}")
    if message.text == "‚úÖ –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏":
        user_data = await state.get_data()
        username = message.from_user.username if message.from_user.username else f"id{message.from_user.id}"
        
        if CHANNEL_ID == 0:
            await message.answer("ID –∫–∞–Ω–∞–ª—É –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ. –ù–µ–º–æ–∂–ª–∏–≤–æ –æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è.", reply_markup=get_main_menu_keyboard())
            logging.error("CHANNEL_ID –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –Ω–µ–º–æ–∂–ª–∏–≤–æ –æ–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è.")
            await state.clear()
            return

        caption = (
            f"**–ù–æ–≤–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è:**\n\n"
            f"üì¶ –ù–∞–∑–≤–∞: {user_data['name']}\n"
            f"üí∞ –¶—ñ–Ω–∞: {user_data['price']}\n"
            f"üìù –û–ø–∏—Å: {user_data['description']}\n"
            f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {user_data['contact']}\n"
            f"üë§ –û–ø—É–±–ª—ñ–∫—É–≤–∞–≤: @{username}"
        )
        
        try:
            if user_data.get('photo_file_id'):
                await bot.send_photo(
                    chat_id=CHANNEL_ID,
                    photo=user_data['photo_file_id'],
                    caption=caption,
                    parse_mode='Markdown'
                )
            else:
                await bot.send_message(
                    chat_id=CHANNEL_ID,
                    text=caption,
                    parse_mode='Markdown'
                )
            await message.answer("‚úÖ –í–∞—à–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ!", reply_markup=get_main_menu_keyboard())
            logging.info(f"‚úÖ –û–≥–æ–ª–æ—à–µ–Ω–Ω—è –≤—ñ–¥ {message.from_user.id} –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª—ñ {CHANNEL_ID}.")
        except Exception as e:
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª: {e}")
            await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", reply_markup=get_main_menu_keyboard())
    else:
        await message.answer("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=get_main_menu_keyboard())
    
    await state.clear()

@dp.message(F.text == "üìñ –ü—Ä–∞–≤–∏–ª–∞")
async def show_rules(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—É—î –ø—Ä–∞–≤–∏–ª–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–æ–º."""
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –ø–µ—Ä–µ–≥–ª—è–¥–∞—î –ø—Ä–∞–≤–∏–ª–∞.")
    await state.clear()
    rules_text = (
        "üìå **–£–º–æ–≤–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è:**\n\n"
        " * üßæ –ü–æ–∫—É–ø–µ—Ü—å –æ–ø–ª–∞—á—É—î –¥–æ—Å—Ç–∞–≤–∫—É.\n"
        " * üí∞ –ü—Ä–æ–¥–∞–≤–µ—Ü—å —Å–ø–ª–∞—á—É—î –∫–æ–º—ñ—Å—ñ—é –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏: **10%**\n"
        f" * üí≥ –û–ø–ª–∞—Ç–∞ –∫–æ–º—ñ—Å—ñ—ó –Ω–∞ Monobank: `{MONOBANK_CARD_NUMBER}`"
    )
    await message.answer(rules_text, parse_mode='Markdown')

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Webhook –¥–ª—è Aiohttp ---

async def on_startup_webhook(aiohttp_app: web.Application):
    """
    –§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É aiohttp –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞.
    –í—Å—Ç–∞–Ω–æ–≤–ª—é—î –≤–µ–±—Ö—É–∫ –¥–ª—è Telegram.
    """
    if not WEBHOOK_URL:
        logging.error("‚ùå WEBHOOK_URL –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. Webhook –Ω–µ –±—É–¥–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ.")
        return
    if not BOT_TOKEN:
        logging.error("‚ùå BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. Webhook –Ω–µ –±—É–¥–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ.")
        return

    base_url = WEBHOOK_URL.rstrip('/')
    webhook_path = f"/webhook/{BOT_TOKEN}"
    full_webhook_url = f"{base_url}{webhook_path}"
    
    logging.info(f"‚ÑπÔ∏è –°–ø—Ä–æ–±–∞ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ Webhook –Ω–∞: {full_webhook_url}")
    try:
        current_webhook_info = await bot.get_webhook_info()
        if current_webhook_info.url != full_webhook_url:
            await bot.set_webhook(full_webhook_url)
            logging.info(f"‚úÖ Webhook —É—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {full_webhook_url}")
        else:
            logging.info(f"‚úÖ Webhook –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {full_webhook_url}. –ü—Ä–æ–ø—É—Å–∫ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.")
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Webhook: {e}")

async def on_shutdown_webhook(aiohttp_app: web.Application):
    """
    –§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø—Ä–∏ –∑—É–ø–∏–Ω—Ü—ñ aiohttp –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞.
    –í–∏–¥–∞–ª—è—î –≤–µ–±—Ö—É–∫ –∑ Telegram.
    """
    logging.info("‚ÑπÔ∏è –í–∏–¥–∞–ª–µ–Ω–Ω—è Webhook...")
    try:
        await bot.delete_webhook()
        logging.info("‚úÖ Webhook —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.")
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è Webhook: {e}")

async def health_check_handler(request):
    """–û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è health check."""
    return web.json_response({"status": "ok", "message": "Bot service is running."})

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞ —Ç–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞."""
    aiohttp_app = web.Application()
    
    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤–µ–±—Ö—É–∫–∞ Telegram
    webhook_path = f"/webhook/{BOT_TOKEN}"
    SimpleRequestHandler(dispatcher=dp, bot=bot).register(aiohttp_app, path=webhook_path)

    # –†–µ—î—Å—Ç—Ä—É—î–º–æ health check endpoint
    aiohttp_app.router.add_get('/', health_check_handler)

    # –†–µ—î—Å—Ç—Ä—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—ó –∑–∞–ø—É—Å–∫—É/–∑—É–ø–∏–Ω–∫–∏ –¥–ª—è aiohttp
    aiohttp_app.on_startup.append(on_startup_webhook)
    aiohttp_app.on_shutdown.append(on_shutdown_webhook)

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ aiohttp –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    # –î–ª—è Render.com –ø–æ—Ä—Ç –∑–∞–∑–≤–∏—á–∞–π 10000 —ñ —Ö–æ—Å—Ç 0.0.0.0
    runner = web.AppRunner(aiohttp_app)
    await runner.setup()
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ä—Ç –∑ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è, –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 10000
    port = int(os.getenv("PORT", 10000))
    site = web.TCPSite(runner, '0.0.0.0', port)
    await site.start()
    
    logging.info("üéâ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ —Ç–∞ –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!")
    
    # –¢—Ä–∏–º–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª –ø–æ–¥—ñ–π –∞–∫—Ç–∏–≤–Ω–∏–º
    while True:
        await asyncio.sleep(3600) # –°–ø–∏–º–æ –≥–æ–¥–∏–Ω—É, —â–æ–± –¥–æ–¥–∞—Ç–æ–∫ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–≤—Å—è

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
    asyncio.run(main())

